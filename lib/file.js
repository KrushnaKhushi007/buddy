// Generated by CoffeeScript 1.4.0
var File, RE_BUILT_HEADER, fs, path;

fs = require('fs');

path = require('path');

RE_BUILT_HEADER = /^\/\*BUILT/g;

module.exports = File = (function() {

  function File(type, filepath, basepath, compilers) {
    var compiler, id;
    this.type = type;
    this.filepath = filepath;
    this.filename = path.basename(this.filepath);
    this.extension = path.extname(this.filename).slice(1);
    this.dependencies = [];
    this.qualifiedFilename = path.relative(basepath, this.filepath).replace(path.extname(this.filename), '');
    this.needsCompile = this.extension !== this.type;
    this.lastChange = null;
    this._contents = '';
    if (this.needsCompile) {
      for (id in compilers) {
        compiler = compilers[id];
        if (this.extension === compiler.extension) {
          this.compiler = compiler;
          break;
        }
      }
    }
  }

  File.prototype.parseContents = function() {
    var contents;
    this._contents = '';
    contents = fs.readFileSync(this.filepath, 'utf8');
    if (contents.match(RE_BUILT_HEADER)) {
      return;
    }
    return this._contents = contents;
  };

  File.prototype.getContents = function(options, fn) {
    if (this.needsCompile) {
      return this._compile(options, fn);
    } else {
      return fn(null, this._contents);
    }
  };

  File.prototype._compile = function(options, fn) {
    var _this = this;
    if (this.compiler != null) {
      return this.compiler.compile(this._contents, options.sources, function(err, compiled) {
        if (err) {
          return fn(err, '');
        } else {
          return fn(null, compiled);
        }
      });
    } else {
      return fn("no compiler plugin available for " + (nofify.strong(this.filename)), '');
    }
  };

  return File;

})();
