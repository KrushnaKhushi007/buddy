// Generated by CoffeeScript 1.4.0
var Dependencies, Dependency, cp, existsSync, fs, mkdir, mv, notify, path, rm, _ref;

path = require('path');

fs = require('fs');

Dependency = require('./dependency');

_ref = require('./utils'), rm = _ref.rm, mv = _ref.mv, cp = _ref.cp, mkdir = _ref.mkdir, notify = _ref.notify, existsSync = _ref.existsSync;

module.exports = Dependencies = (function() {

  function Dependencies(options, compressor) {
    var data, destination, _ref1,
      _this = this;
    this.options = options;
    this.compressor = compressor;
    this._outstanding = 0;
    this.dependencies = [];
    this.files = [];
    this.temp = path.resolve('.tmp');
    _ref1 = this.options;
    for (destination in _ref1) {
      data = _ref1[destination];
      data.sources.forEach(function(source) {
        return _this.dependencies.push(new Dependency(source, destination, data.output));
      });
    }
  }

  Dependencies.prototype.install = function(fn) {
    var _this = this;
    return mkdir(this.temp, function(err) {
      if (err) {
        return notify.error(err);
      } else {
        return _this.dependencies.forEach(function(dependency) {
          _this._outstanding++;
          return _this._installDependency(dependency, fn);
        });
      }
    });
  };

  Dependencies.prototype._installDependency = function(dependency, fn) {
    var _this = this;
    return dependency.install(this.temp).once('error', function(err) {
      notify.warn(err);
      _this.dependencies.splice(_this.dependencies.indexOf(dependency), 1);
      return dependency.destroy();
    }).on('dependency', function(source) {
      var dependant;
      dependant = new Dependency(source, dependency.destination, dependency.output);
      _this.dependencies.splice(_this.dependencies.indexOf(dependency), 0, dependant);
      _this._outstanding++;
      return _this._installDependency(dependant, fn);
    }).once('end', function() {
      _this._outstanding--;
      notify.print("" + (notify.colour('installed', notify.GREEN)) + " " + (notify.strong(dependency.id)) + " to " + (notify.strong(path.relative(process.cwd(), dependency.destination))), 3);
      _this.files = _this.files.concat(dependency.files);
      if (!_this._outstanding) {
        return _this._pack(fn);
      }
    });
  };

  Dependencies.prototype._pack = function(fn) {
    var _this = this;
    return rm(this.temp, function(err) {
      var contents, files, i, n, output, outputable, outputs, outstanding, _results;
      if (err) {
        return notify.error(err);
      } else {
        outputs = {};
        outputable = _this.dependencies.filter(function(dependency) {
          return dependency.output;
        });
        if (outputable.length) {
          outputable.forEach(function(dependency) {
            var _name, _ref1;
            if ((_ref1 = outputs[_name = dependency.output]) == null) {
              outputs[_name] = [];
            }
            return outputs[dependency.output] = outputs[dependency.output].concat(dependency.resources);
          });
          n = Object.keys(outputs).length;
          i = 0;
          outstanding = 0;
          contents = [];
          _results = [];
          for (output in outputs) {
            files = outputs[output];
            _results.push(files.forEach(function(file) {
              outstanding++;
              return fs.readFile(file, function(err, data) {
                var content;
                outstanding--;
                if (err) {
                  return fn(err, _this.files);
                } else {
                  contents.push(data);
                  if (!outstanding) {
                    content = contents.join('\n');
                    return mkdir(output, function(err) {
                      if (err) {
                        return fn(err, _this.files);
                      } else {
                        return _this.compressor.compress(content, function(err, content) {
                          if (err) {
                            return fn(err, _this.files);
                          } else {
                            return fs.writeFile(output, content, 'utf8', function(err) {
                              if (err) {
                                return fn(err, _this.files);
                              } else {
                                notify.print("" + (notify.colour('compressed', notify.GREEN)) + " " + (notify.strong(path.relative(process.cwd(), output))), 3);
                                _this.files.push(output);
                                if (++i === n) {
                                  return fn(null, _this.files);
                                }
                              }
                            });
                          }
                        });
                      }
                    });
                  }
                }
              });
            }));
          }
          return _results;
        } else {
          return fn(null, _this.files);
        }
      }
    });
  };

  return Dependencies;

})();
