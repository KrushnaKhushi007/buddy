// Generated by CoffeeScript 1.4.0
var Dependencies, Dependency, cp, existsSync, fs, mkdir, mv, notify, path, rm, _ref;

path = require('path');

fs = require('fs');

Dependency = require('./dependency');

_ref = require('./utils'), rm = _ref.rm, mv = _ref.mv, cp = _ref.cp, mkdir = _ref.mkdir, notify = _ref.notify, existsSync = _ref.existsSync;

module.exports = Dependencies = (function() {

  function Dependencies(options, compressor) {
    var data, destination, _ref1,
      _this = this;
    this.options = options;
    this.compressor = compressor;
    this.installIdx = 0;
    this.dependencies = [];
    this.files = [];
    this.temp = path.resolve('.tmp');
    _ref1 = this.options;
    for (destination in _ref1) {
      data = _ref1[destination];
      data.sources.forEach(function(source) {
        return _this.dependencies.push(new Dependency(source, destination, data.output));
      });
    }
  }

  Dependencies.prototype.install = function(fn) {
    var _this = this;
    mkdir(this.temp);
    return this.dependencies.forEach(function(dependency) {
      return _this._installDependency(dependency, fn);
    });
  };

  Dependencies.prototype._installDependency = function(dependency, fn) {
    var _this = this;
    return dependency.install(this.temp).once('error', function(err) {
      notify.warn(err);
      _this.dependencies.splice(_this.dependencies.indexOf(dependency), 1);
      return dependency.destroy();
    }).on('dependency', function(source) {
      var dependant;
      dependant = new Dependency(source, dependency.destination, dependency.output);
      _this.dependencies.splice(_this.dependencies.indexOf(dependency), 0, dependant);
      return _this._installDependency(dependant, fn);
    }).once('end', function() {
      notify.print("" + (notify.colour('installed', notify.GREEN)) + " " + (notify.strong(dependency.id)) + " to " + (notify.strong(dependency.destination)), 3);
      _this.files = _this.files.concat(dependency.files);
      _this.installIdx++;
      if (_this.installIdx === _this.dependencies.length) {
        return _this._pack(fn);
      }
    });
  };

  Dependencies.prototype._pack = function(fn) {
    var content, contents, files, i, n, output, outputable, outputs, _results,
      _this = this;
    rm(this.temp);
    outputs = {};
    outputable = this.dependencies.filter(function(dependency) {
      return dependency.output;
    });
    if (outputable.length) {
      outputable.forEach(function(dependency) {
        var _name, _ref1;
        if ((_ref1 = outputs[_name = dependency.output]) == null) {
          outputs[_name] = [];
        }
        return outputs[dependency.output] = outputs[dependency.output].concat(dependency.resources);
      });
      n = Object.keys(outputs).length;
      i = 0;
      _results = [];
      for (output in outputs) {
        files = outputs[output];
        contents = files.map(function(file) {
          return fs.readFileSync(file);
        });
        content = contents.join('\n');
        mkdir(output);
        _results.push(this.compressor.compress(content, function(err, content) {
          if (err) {
            return fn(err, _this.files);
          } else {
            notify.print("" + (notify.colour('compressed', notify.GREEN)) + " " + (notify.strong(path.relative(output))), 3);
            fs.writeFileSync(output, content);
            _this.files.push(output);
            if (++i === n) {
              return fn(null, _this.files);
            }
          }
        }));
      }
      return _results;
    } else {
      return fn(null, this.files);
    }
  };

  return Dependencies;

})();
