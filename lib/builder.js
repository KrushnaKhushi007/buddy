// Generated by CoffeeScript 1.4.0
var Builder, CSS, HTML, JS, RE_IGNORE_FILE, RE_WATCH_IGNORE_FILE, configuration, dependencies, existsSync, filelog, fs, notify, path, processors, readdir, rm, target, _ref;

fs = require('fs');

path = require('path');

target = require('./core/target');

configuration = require('./core/configuration');

processors = require('./processors');

dependencies = require('./core/dependencies');

filelog = require('./utils/filelog');

notify = require('./utils/notify');

_ref = require('./utils/fs'), readdir = _ref.readdir, rm = _ref.rm, existsSync = _ref.existsSync;

RE_IGNORE_FILE = /^[\._~]|[-\.]min[-\.]|svn|~$/;

RE_WATCH_IGNORE_FILE = /^[\.~]|[-\.]min[-\.]|svn|~$/;

JS = 'js';

CSS = 'css';

HTML = 'html';

module.exports = Builder = (function() {

  function Builder() {
    this.config = null;
    this.processors = null;
    this.dependencies = null;
    this.filelog = null;
    this.compress = false;
    this.lint = false;
    this.watching = false;
    this.sources = {
      js: null,
      css: null,
      html: null
    };
    this.targets = {
      js: [],
      css: [],
      html: []
    };
  }

  Builder.prototype.install = function(configpath) {
    var _this = this;
    return this._initialize(configpath, function(err) {
      if (err) {
        return notify.error(err, 2);
      }
      if (_this.config.dependencies) {
        notify.print('installing dependencies...', 2);
        return dependencies.install(function(err, files) {
          files && _this.filelog.add(files);
          return err && notify.error(err, 2);
        });
      } else {
        return notify.error('no dependencies specified in configuration file');
      }
    });
  };

  Builder.prototype.build = function(configpath, compress, lint) {
    var _this = this;
    return this._initialize(configpath, function(err) {
      if (err) {
        return notify.error(err, 2);
      }
      return [JS, CSS].forEach(function(type) {
        var build;
        if (_this._validBuildType(build = _this.config.build[type])) {
          _this.sources[type] = new Source(type, build, _this.processors);
          return _this.sources[type].parse(function(err) {
            if (err) {
              return notify.error("failed parsing sources " + (notify.strong(build)), 2);
            }
            return _this._parseTargets(type, build.targets, function(err, instances) {
              if (err) {
                return notify.error(err, 2);
              }
              return _this.targets[type] = instances;
            });
          });
        } else {
          return notify.error('invalid build configuration', 2);
        }
      });
    });
  };

  Builder.prototype.watch = function(configpath, compress) {
    var _this = this;
    this.compress = compress;
    return this._initialize(configpath, function(err) {
      if (err) {
        return notify.error(err, 2);
      }
      _this.build(configpath, _this.compress, false);
      _this.watching = true;
      return [JS, CSS].forEach(function(type) {
        if (_this[type + 'Sources'].count) {
          notify.print("watching [" + (notify.strong(_this.config.build[type].sources.join(', '))) + "]...", 2);
          return _this[type + 'Sources'].locations.forEach(function(source) {
            var watcher;
            _this.watchers.push(watcher = new Watcher(RE_WATCH_IGNORE_FILE));
            watcher.on('create', _this._onWatchCreate);
            watcher.on('change', _this._onWatchChange);
            watcher.on('delete', _this._onWatchDelete);
            return watcher.watch(source);
          });
        }
      });
    });
  };

  Builder.prototype.deploy = function(configpath) {
    return this.build(configpath, true, false);
  };

  Builder.prototype.clean = function() {
    if (filelog.files.length) {
      notify.print('cleaning files...', 2);
      filelog.files.forEach(function(file) {
        notify.print("" + (notify.colour('deleted', notify.RED)) + " " + (notify.strong(file)), 3);
        return rm(path.resolve(file));
      });
      return filelog.clean();
    } else {
      return notify.print('no files to clean', 2);
    }
  };

  Builder.prototype._initialize = function(configpath, fn) {
    if (!this.initialized) {
      return configuration.load(configpath, function(err, data) {
        var _this = this;
        if (err) {
          return fn(err);
        }
        this.config = data;
        notify.print("loaded config " + (notify.strong(this.url)), 2);
        return processors.load(this.config.settings && this.config.settings.processors, function(err, installed) {
          if (err) {
            return fn(err);
          }
          _this.processors = installed;
          _this.initialized = true;
          return fn();
        });
      });
    } else {
      return fn();
    }
  };

  Builder.prototype._validBuildType = function(build) {
    return !!(build.sources && build.sources.length >= 1 && build.targets && build.targets.length >= 1);
  };

  Builder.prototype._parseTargets = function(type, targets, fn) {
    var instances, outstanding, parse,
      _this = this;
    instances = [];
    outstanding = 0;
    parse = function(targets, parent) {
      return targets.forEach(function(options) {
        options.parent = parent;
        options.source = _this.sources[type];
        outstanding++;
        return target(type, options, function(err, instance) {
          outstanding--;
          if (err) {
            return fn(err);
          }
          instances.push(instance);
          if (options.targets) {
            parse(options.targets, instance);
          }
          if (!outstanding) {
            return fn(null, instances);
          }
        });
      });
    };
    return parse(targets);
  };

  Builder.prototype._runTarget = function(target, compress, lint, fn) {
    var _this = this;
    return target.run(compress, lint, function(err, files) {
      files && _this.filelog.add(files);
      fn && fn(files);
      return err && notify.error(err, 2);
    });
  };

  return Builder;

})();
