// Generated by CoffeeScript 1.4.0
var Dependency, RE_GITHUB_PROJECT, RE_GITHUB_URL, RE_PACKAGE_NOT_FOUND, bower, cp, events, existsSync, fs, http, mkdir, mv, notify, path, request, rm, unzip, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

path = require('path');

fs = require('fs');

events = require('events');

bower = require('bower');

request = require('superagent');

http = require('http');

unzip = require('unzip');

_ref = require('./utils'), rm = _ref.rm, mv = _ref.mv, cp = _ref.cp, mkdir = _ref.mkdir, notify = _ref.notify;

existsSync = fs.existsSync || path.existsSync;

RE_GITHUB_PROJECT = /\w+\/\w+/;

RE_GITHUB_URL = /git:\/\/(.*)\.git/;

RE_PACKAGE_NOT_FOUND = /was not found/;

module.exports = Dependency = (function(_super) {

  __extends(Dependency, _super);

  function Dependency(source, destination, output) {
    this.local = false;
    this.id = source;
    this.url = null;
    this.version = 'master';
    this.resources = null;
    this.location = null;
    this.destination = path.resolve(destination);
    this.output = output && path.resolve(output);
    this.keep = source.indexOf(path.resolve(destination)) !== -1;
    if (existsSync(path.resolve(source))) {
      this.local = true;
      this.location = source;
    } else {
      source = source.split('#');
      if (source[1]) {
        this.resources = source[1].split('|');
      }
      source = source[0].split('@');
      if (source[1]) {
        this.version = source[1];
      }
      this.id = source[0];
      if (RE_GITHUB_PROJECT.test(this.id)) {
        this.url = "https://github.com/" + this.id + "/archive/" + this.version + ".zip";
        this.id = this.id.split('/')[1];
      }
    }
  }

  Dependency.prototype.lookupPackage = function() {
    var _this = this;
    bower.commands.lookup(this.id).on('error', function() {
      return _this.emit('error', 'no package found for:' + _this.id);
    }).on('data', function(data) {
      if (RE_PACKAGE_NOT_FOUND.test(data)) {
        return _this.emit('error', 'no package found for:' + _this.id);
      } else {
        _this.url = "https://" + (RE_GITHUB_URL.exec(data)[1]) + "/archive/" + _this.version + ".zip";
        return _this.emit('end');
      }
    });
    return this;
  };

  Dependency.prototype.fetch = function(temp) {
    var filename, req,
      _this = this;
    filename = temp + '/' + this.id + '-' + this.version + '.zip';
    req = request.get(this.url).buffer(false);
    req.end(function(err, res) {
      if (err || res.error) {
        return _this.emit('error', 'fetching ' + _this.url + ' failed with error code: ' + http.STATUS_CODES[res.status]);
      } else {
        res.pipe(fs.createWriteStream(filename));
        return res.on('end', function() {
          return fs.createReadStream(filename).pipe(unzip.Extract({
            path: temp
          })).on('error', function() {
            return _this.emit('error', 'unzipping archive: ' + filename);
          }).on('close', function() {
            _this.location = filename.replace(path.extname(filename), '');
            return _this.emit('end');
          });
        });
      }
    });
    return this;
  };

  Dependency.prototype.resolveResources = function() {
    var config, dependency, json, version, _ref1,
      _this = this;
    ({
      add: function(filename) {
        var filepath;
        filepath = path.resolve(_this.location, filename);
        if (existsSync(filepath)) {
          return _this.resources.push(filepath);
        }
      }
    });
    if (!this.resources) {
      if (existsSync(this.location + '/component.json')) {
        config = '/component.json';
      } else if (existsSync(this.location + '/package.json')) {
        config = '/package.json';
      } else {
        return this.emit('error', 'no config (component/package).json file found for: ' + this.id);
      }
      json = JSON.parse(fs.readfileSync(this.location + config));
      if (json.dependencies) {
        _ref1 = json.dependencies;
        for (dependency in _ref1) {
          version = _ref1[dependency];
          this.emit('dependency', dependency, version);
        }
      }
      this.resources = [];
      if (json.scripts) {
        json.scripts.forEach(function(filename) {
          return add(filename);
        });
      } else if (json.main) {
        add(json.main);
      } else {
        return this.emit('error', 'unable to resolve resources for: ' + this.id);
      }
      this.emit('end');
    }
    return this;
  };

  Dependency.prototype.move = function() {
    mkdir(path.resolve(this.destination));
    if (this.local) {
      this.filepath = path.resolve(this.destination, this.url);
      cp(path.normalize(process.cwd(), this.url), this.destination);
    }
    return this;
  };

  return Dependency;

})(events.EventEmitter);
