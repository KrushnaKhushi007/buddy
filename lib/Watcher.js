// Generated by CoffeeScript 1.4.0
var Watcher, events, existsSync, fs, path, readdir, wait, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

events = require('events');

_ref = require('./utils'), readdir = _ref.readdir, wait = _ref.wait;

existsSync = fs.existsSync || path.existsSync;

module.exports = Watcher = (function(_super) {

  __extends(Watcher, _super);

  function Watcher(ignore) {
    this.ignore = ignore != null ? ignore : /^\./;
    this.watchers = {};
  }

  Watcher.prototype.watch = function(source) {
    var lastChange, lastSize, stats,
      _this = this;
    if (!this.ignore.test(path.basename(source))) {
      stats = fs.statSync(source);
      lastChange = stats.mtime.getTime();
      lastSize = stats.size;
      if (stats.isDirectory()) {
        fs.readdirSync(source).forEach(function(item) {
          return _this.watch(path.resolve(source, item));
        });
      }
      return this.watchers[source] = fs.watch(source, function(evt, filename) {
        if (existsSync(source)) {
          stats = fs.statSync(source);
          if (stats.isFile()) {
            if (stats.mtime.getTime() !== lastChange && stats.size !== lastSize) {
              _this.emit('change', source, stats);
            }
            return lastChange = stats.mtime.getTime();
          } else if (stats.isDirectory()) {
            if (!_this.watchers[source]) {
              _this.emit('create', source, stats);
            }
            return fs.readdirSync(source).forEach(function(item) {
              item = path.resolve(source, item);
              if (!_this.ignore.test(path.basename(item)) && !_this.watchers[item]) {
                _this.emit('create', item, fs.statSync(item));
                return _this.watch(item);
              }
            });
          }
        } else {
          _this.unwatch(source);
          return _this.emit('delete', source);
        }
      });
    }
  };

  Watcher.prototype.unwatch = function(source) {
    if (this.watchers[source] != null) {
      try {
        this.watchers[source].close();
      } catch (err) {

      }
      return delete this.watchers[source];
    }
  };

  Watcher.prototype.clean = function() {
    var source, _results;
    _results = [];
    for (source in this.watchers) {
      _results.push(this.unwatch(source));
    }
    return _results;
  };

  return Watcher;

})(events.EventEmitter);
