// Generated by CoffeeScript 1.4.0
var ESCAPE_MAP, RE_COMMENT_LINES, RE_ESCAPE, RE_MODULE, RE_MODULE_LAZY, RE_REQUIRE, RE_SPACES, RE_WIN_SEPARATOR, debug, indent, path, _ref;

path = require('path');

_ref = require('../../utils/notify'), indent = _ref.indent, debug = _ref.debug;

RE_WIN_SEPARATOR = /\\\\?/g;

RE_MODULE = /require\.register[\s|\(].+(?:function)? *\( *module *, *exports *, *require *\)/gm;

RE_MODULE_LAZY = /require\.register[\s|\(].+\)?/gm;

RE_COMMENT_LINES = /^\s*(?:\/\/|#).+$/gm;

RE_REQUIRE = /require[\s|\(]['|"](.*?)['|"]/g;

RE_SPACES = /\s/;

RE_ESCAPE = /\\|\r?\n|"/g;

ESCAPE_MAP = {
  '\\': '\\\\',
  '\n': '\\n',
  '\r\n': '\\n',
  '"': '\\"'
};

module.exports = {
  name: 'node',
  category: 'js',
  type: 'module',
  getModuleID: function(qualifiedFilename) {
    var module;
    module = qualifiedFilename.toLowerCase().replace(RE_SPACES, '');
    if (process.platform === 'win32') {
      module = module.replace(RE_WIN_SEPARATOR, '/');
    }
    return module;
  },
  getModuleDependencies: function(content, id) {
    var dep, deps, match, part, parts, _i, _len, _ref1;
    deps = [];
    content = content.replace(RE_COMMENT_LINES, '');
    while (match = RE_REQUIRE.exec(content)) {
      dep = match[1];
      parts = dep.split('/');
      if (dep.charAt(0) === '.') {
        parts = id.split('/');
        parts.pop();
        _ref1 = dep.split('/');
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          part = _ref1[_i];
          if (part === '..') {
            parts.pop();
          } else if (part !== '.') {
            parts.push(part);
          }
        }
      }
      deps.push(parts.join('/'));
    }
    return deps;
  },
  wrapModuleContents: function(content, id, lazy) {
    var re;
    if (lazy == null) {
      lazy = false;
    }
    re = lazy ? RE_MODULE_LAZY : RE_MODULE;
    re.lastIndex = 0;
    if (!re.test(content)) {
      if (lazy) {
        content = "require.register('" + id + "', " + content + ");";
      } else {
        content = "require.register('" + id + "', function(module, exports, require) {\n" + (indent(content, 2)) + "\n});";
      }
    }
    return content;
  },
  concat: function(file) {
    var add, contents;
    contents = [];
    add = function(file) {
      var content;
      file.dependencies.forEach(function(dependency) {
        if ('string' !== typeof dependency) {
          return add(dependency);
        }
      });
      content = file.getContent(true);
      if (contents.indexOf(content) === -1) {
        return contents.push(content);
      }
    };
    add(file);
    return contents.join('\n');
  }
};
