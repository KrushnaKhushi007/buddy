// Generated by CoffeeScript 1.4.0
var DEFAULTS, defaults, existsSync, installed, loadModules, notify, overrideDefaults, path, resolvePath;

path = require('path');

existsSync = require('../utils/fs').existsSync;

notify = require('../utils/notify');

DEFAULTS = {
  js: {
    compilers: ['./compilers/coffeescript'],
    compressor: './compressor/uglifyjs',
    linter: './linter/jshint',
    module: './module/node'
  },
  css: {
    compilers: ['./compilers/less', './compilers/stylus'],
    compressor: './compressor/cleancss',
    linter: './linter/csslint',
    module: './module/css'
  },
  html: {}
};

defaults = null;

exports.installed = installed = null;

exports.load = function(options, fn) {
  defaults = JSON.parse(JSON.stringify(DEFAULTS));
  options && overrideDefaults(options);
  loadModules(function(err) {
    if (err) {
      return fn(err);
    } else {
      return fn(null, installed);
    }
  });
};

resolvePath = function(processor, type) {
  var processorPath;
  processorPath = path.resolve(processor);
  if (!existsSync(processorPath + '.js')) {
    processorPath = path.resolve(__dirname, type, processor);
  }
  return processorPath;
};

overrideDefaults = function(options) {
  var category, processor, type, _results;
  _results = [];
  for (category in options) {
    _results.push((function() {
      var _ref, _results1,
        _this = this;
      _ref = options[category];
      _results1 = [];
      for (type in _ref) {
        processor = _ref[type];
        if (Array.isArray(defaults[category][type])) {
          if (!Array.isArray(processor)) {
            processor = [processor];
          }
          _results1.push(processor.forEach(function(plug) {
            return defaults[category][type].push(resolvePath(plug, type));
          }));
        } else {
          _results1.push(defaults[category][type] = resolvePath(processor, type));
        }
      }
      return _results1;
    }).call(this));
  }
  return _results;
};

loadModules = function(fn) {
  var category, idx, proc, processor, type, _base, _base1, _i, _len, _ref, _ref1, _ref2, _ref3;
  installed = {};
  for (category in defaults) {
    if ((_ref = installed[category]) == null) {
      installed[category] = {};
    }
    _ref1 = defaults[category];
    for (type in _ref1) {
      processor = _ref1[type];
      if (Array.isArray(processor)) {
        if ((_ref2 = (_base = installed[category])[type]) == null) {
          _base[type] = [];
        }
        for (idx = _i = 0, _len = processor.length; _i < _len; idx = ++_i) {
          proc = processor[idx];
          try {
            installed[category][type][idx] = require(proc);
          } catch (err) {
            return fn("failed loading processor " + (notify.strong(proc)));
          }
        }
      } else {
        if ((_ref3 = (_base1 = installed[category])[type]) == null) {
          _base1[type] = {};
        }
        try {
          installed[category][type] = require(processor);
        } catch (err) {
          return fn("failed loading processor " + (notify.strong(processor)));
        }
      }
    }
  }
  return fn();
};
