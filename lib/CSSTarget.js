// Generated by CoffeeScript 1.4.0
var CSSTarget, Target, fs, indent, mkdir, notify, path, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

_ref = require('./utils'), notify = _ref.notify, mkdir = _ref.mkdir, indent = _ref.indent;

Target = require('./target');

module.exports = CSSTarget = (function(_super) {

  __extends(CSSTarget, _super);

  function CSSTarget(input, output, fileCache, options) {
    CSSTarget.__super__.constructor.call(this, 'css', input, output, fileCache, options);
  }

  CSSTarget.prototype._build = function(compress, lint, fn) {
    var _this = this;
    return this.sources.forEach(function(file, idx) {
      var filepath, opts;
      filepath = path.extname(_this.output).length ? _this.output : path.join(_this.output, file.qualifiedFilename) + '.css';
      opts = {
        sources: _this.fileCache.locations.concat()
      };
      return file.getContents(opts, function(err, content) {
        if (err) {
          return fn(err);
        } else {
          if (lint) {
            _this._lint(content, filepath);
          }
          if (compress) {
            return _this._compress(content, filepath, function(err, content) {
              if (err) {
                return fn(err);
              } else {
                return _this._writeFile(content, filepath, fn);
              }
            });
          } else {
            return _this._writeFile(content, filepath, fn);
          }
        }
      });
    });
  };

  CSSTarget.prototype._writeFile = function(content, filepath, fn) {
    mkdir(filepath);
    notify.print("" + (notify.colour('built', notify.GREEN)) + " " + (notify.strong(path.basename(filepath))), 3);
    fs.writeFileSync(filepath, content, 'utf8');
    return fn();
  };

  return CSSTarget;

})(Target);
