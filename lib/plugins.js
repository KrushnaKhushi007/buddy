// Generated by CoffeeScript 1.4.0
var DEFAULTS, defaults, existsSync, loadModules, notify, overrideDefaults, path, resolvePath, _ref;

path = require('path');

_ref = require('./utils'), notify = _ref.notify, existsSync = _ref.existsSync;

DEFAULTS = {
  js: {
    compilers: ['./plugins/compilers/coffeescript'],
    compressor: './plugins/compressor/uglifyjs',
    linter: './plugins/linter/jshint',
    module: './plugins/module/node'
  },
  css: {
    compilers: ['./plugins/compilers/less', './plugins/compilers/stylus'],
    compressor: './plugins/compressor/cleancss',
    linter: './plugins/linter/csslint'
  },
  html: {}
};

defaults = null;

resolvePath = function(plugin, type) {
  var pluginPath;
  pluginPath = path.resolve(plugin);
  if (!existsSync(pluginPath + '.js')) {
    pluginPath = path.resolve(__dirname, 'plugins', type, plugin);
  }
  return pluginPath;
};

overrideDefaults = function(options) {
  var category, plugin, type, _results;
  _results = [];
  for (category in options) {
    _results.push((function() {
      var _ref1, _results1,
        _this = this;
      _ref1 = options[category];
      _results1 = [];
      for (type in _ref1) {
        plugin = _ref1[type];
        if (Array.isArray(defaults[category][type])) {
          if (!Array.isArray(plugin)) {
            plugin = [plugin];
          }
          _results1.push(plugin.forEach(function(plug) {
            return defaults[category][type].push(resolvePath(plug, type));
          }));
        } else {
          _results1.push(defaults[category][type] = resolvePath(plugin, type));
        }
      }
      return _results1;
    }).call(this));
  }
  return _results;
};

loadModules = function() {
  var category, plugin, plugins, type, _base, _base1, _ref1, _ref2, _ref3, _ref4,
    _this = this;
  plugins = {};
  for (category in defaults) {
    if ((_ref1 = plugins[category]) == null) {
      plugins[category] = {};
    }
    _ref2 = defaults[category];
    for (type in _ref2) {
      plugin = _ref2[type];
      if (Array.isArray(plugin)) {
        if ((_ref3 = (_base = plugins[category])[type]) == null) {
          _base[type] = [];
        }
        plugin.forEach(function(plug, idx) {
          try {
            return plugins[category][type][idx] = require(plug);
          } catch (err) {
            return notify.error("loading plugin " + (notify.strong(plug)), 2);
          }
        });
      } else {
        if ((_ref4 = (_base1 = plugins[category])[type]) == null) {
          _base1[type] = {};
        }
        try {
          plugins[category][type] = require(plugin);
        } catch (err) {
          notify.error("loading plugin " + (notify.strong(plugin)), 2);
        }
      }
    }
  }
  return plugins;
};

exports.load = function(options) {
  defaults = JSON.parse(JSON.stringify(DEFAULTS));
  options && overrideDefaults(options);
  return loadModules();
};
