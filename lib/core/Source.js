// Generated by CoffeeScript 1.4.0
var Source, existsSync, file, ignored, indir, path, readdir, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

path = require('path');

file = require('./file');

_ref = require('../utils/fs'), indir = _ref.indir, readdir = _ref.readdir, existsSync = _ref.existsSync, ignored = _ref.ignored;

module.exports = Source = (function() {

  function Source(type, sources, processors) {
    var _this = this;
    this.type = type;
    this.processors = processors;
    this._onWatchDelete = __bind(this._onWatchDelete, this);

    this._onWatchChange = __bind(this._onWatchChange, this);

    this._onWatchCreate = __bind(this._onWatchCreate, this);

    this._watchers = [];
    this.byPath = {};
    this.byModule = {};
    this.length = 0;
    this.locations = [];
    sources.forEach(function(source) {
      return _this.locations.push(path.resolve(source));
    });
  }

  Source.prototype.parse = function(fn) {
    var outstanding,
      _this = this;
    outstanding = 0;
    return this.locations.forEach(function(location) {
      outstanding++;
      return readdir(location, ignored, function(err, files) {
        outstanding--;
        if (err) {
          return fn(err);
        }
        files.forEach(function(f) {
          return _this.add(f);
        });
        if (!outstanding) {
          return fn();
        }
      });
    });
  };

  Source.prototype.add = function(filepath) {
    var basepath,
      _this = this;
    filepath = path.resolve(filepath);
    basepath = this._getBasepath(filepath);
    if (!this.byPath[filepath] && basepath) {
      return file(this.type, filepath, basepath, this.processors, function(err, instance) {
        if (err) {
          return;
        }
        _this.length++;
        _this.byPath[instance.filepath] = instance;
        return _this.byModule[instance.moduleId] = instance;
      });
    }
  };

  Source.prototype.remove = function(filepath) {
    var f;
    filepath = path.resolve(filepath);
    if (f = this.byPath[filepath]) {
      this.length--;
      delete this.byPath[filepath];
      delete this.byModule[file.moduleId];
      return f.destroy();
    }
  };

  Source.prototype.watch = function(fn) {};

  Source.prototype._getBasepath = function(filepath) {
    var location, _i, _len, _ref1;
    _ref1 = this.locations;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      location = _ref1[_i];
      if (indir(location, filepath)) {
        return location;
      }
    }
    return null;
  };

  Source.prototype._onWatchCreate = function(filename, stats) {
    var type;
    type = this._getFileType(filename);
    if (type && (file = this._fileFactory(filename, this._getSourceLocation(filename, type)))) {
      notify.print("[" + (new Date().toLocaleTimeString()) + "] " + (notify.colour('added', notify.GREEN)) + " " + (notify.strong(path.basename(filename))), 3);
      return this._cacheFile(file, this[type + 'Sources']);
    }
  };

  Source.prototype._onWatchChange = function(filename, stats) {
    var type,
      _this = this;
    notify.print("[" + (new Date().toLocaleTimeString()) + "] " + (notify.colour('changed', notify.YELLOW)) + " " + (notify.strong(path.basename(filename))), 3);
    type = this._getFileType(filename);
    return this[type + 'Targets'].forEach(function(target) {
      target.watching = true;
      return _this._runTarget(target, _this.compress, false);
    });
  };

  Source.prototype._onWatchDelete = function(filename) {
    var type;
    type = this._getFileType(filename);
    if (type && (file = this[type + 'Sources'].byPath[filename])) {
      notify.print("[" + (new Date().toLocaleTimeString()) + "] " + (notify.colour('removed', notify.RED)) + " " + (notify.strong(path.basename(filename))), 3);
      return this._uncacheFile(file, this[type + 'Sources']);
    }
  };

  return Source;

})();
