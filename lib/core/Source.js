// Generated by CoffeeScript 1.4.0
var Source, Watcher, colour, debug, existsSync, file, ignored, indir, notify, path, print, readdir, reloader, strong, _ref, _ref1;

path = require('path');

file = require('./file');

reloader = require('../utils/reloader');

Watcher = require('../utils/watcher');

notify = require('../utils/notify');

_ref = require('../utils/notify'), debug = _ref.debug, strong = _ref.strong, print = _ref.print, colour = _ref.colour;

_ref1 = require('../utils/fs'), indir = _ref1.indir, readdir = _ref1.readdir, existsSync = _ref1.existsSync, ignored = _ref1.ignored;

module.exports = Source = (function() {

  function Source(type, sources, processors) {
    var _this = this;
    this.type = type;
    this.processors = processors;
    debug("created " + type + " Source instance for: " + (strong(sources)), 2);
    this._watchers = [];
    this.byPath = {};
    this.byModule = {};
    this.length = 0;
    this.locations = [];
    sources.forEach(function(source) {
      return _this.locations.push(path.resolve(source));
    });
  }

  Source.prototype.parse = function(fn) {
    var outstanding,
      _this = this;
    outstanding = 0;
    return this.locations.forEach(function(location) {
      outstanding++;
      return readdir(location, ignored, function(err, files) {
        outstanding--;
        if (err) {
          return fn(err);
        }
        files.forEach(function(f) {
          return _this.add(f);
        });
        if (!outstanding) {
          return fn();
        }
      });
    });
  };

  Source.prototype.add = function(filepath) {
    var basepath,
      _this = this;
    filepath = path.resolve(filepath);
    basepath = this._getBasepath(filepath);
    if (!this.byPath[filepath] && basepath) {
      return file(this.type, filepath, basepath, this.processors, function(err, instance) {
        if (err) {
          return;
        }
        _this.length++;
        _this.byPath[instance.filepath] = instance;
        return _this.byModule[instance.moduleID] = instance;
      });
    }
  };

  Source.prototype.remove = function(filepath) {
    var f;
    filepath = path.resolve(filepath);
    if (f = this.byPath[filepath]) {
      debug("removed source: " + (strong(path.relative(process.cwd(), filepath))), 3);
      this.length--;
      delete this.byPath[filepath];
      delete this.byModule[file.moduleID];
      return f.destroy();
    }
  };

  Source.prototype.watch = function(reload, fn) {
    var _this = this;
    return this.locations.forEach(function(location) {
      var watcher;
      print("watching " + (strong(path.relative(process.cwd(), location))) + "...", 3);
      _this._watchers.push(watcher = new Watcher(ignored));
      watcher.on('create', function(filepath, stats) {
        _this.add(filepath);
        return print("[" + (new Date().toLocaleTimeString()) + "] " + (colour('added', notify.GREEN)) + " " + (strong(path.relative(process.cwd(), filepath))), 3);
      });
      watcher.on('delete', function(filepath) {
        _this.remove(filepath);
        return print("[" + (new Date().toLocaleTimeString()) + "] " + (colour('removed', notify.RED)) + " " + (strong(path.relative(process.cwd(), filepath))), 3);
      });
      watcher.on('change', function(filepath, stats) {
        print("[" + (new Date().toLocaleTimeString()) + "] " + (colour('changed', notify.YELLOW)) + " " + (strong(path.relative(process.cwd(), filepath))), 3);
        file = _this.byPath[filepath];
        return fn(null, file);
      });
      watcher.on('error', function(err) {
        return fn(err);
      });
      watcher.watch(location);
      return reloader.start('com.popeindustries.buddy', 'buddy', '1.0', function(err) {
        return fn(err);
      });
    });
  };

  Source.prototype.reload = function() {
    return reloader.refresh();
  };

  Source.prototype._getBasepath = function(filepath) {
    var location, _i, _len, _ref2;
    _ref2 = this.locations;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      location = _ref2[_i];
      if (indir(location, filepath)) {
        return location;
      }
    }
    return null;
  };

  return Source;

})();
