// Generated by CoffeeScript 1.4.0
var BUILT_HEADER, JSTarget, RE_HELPER_METHODS, Target, fs, indent, mkdir, notify, path, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

_ref = require('./utils'), notify = _ref.notify, mkdir = _ref.mkdir, indent = _ref.indent;

Target = require('./target');

BUILT_HEADER = '/*BUILT ';

RE_HELPER_METHODS = /^(\s+)(__\w*)\s=\s(.+)(,|;)$/gm;

module.exports = JSTarget = (function(_super) {

  __extends(JSTarget, _super);

  function JSTarget(input, output, fileCache, options) {
    JSTarget.__super__.constructor.call(this, 'js', input, output, fileCache, options);
    this.concat = this.options.modular && fs.statSync(this.input).isFile();
  }

  JSTarget.prototype._addSource = function(file, dependantFile) {
    var _ref1,
      _this = this;
    if ((_ref1 = this.options.parent) != null ? _ref1.hasSource(file) : void 0) {
      return;
    }
    if (file.dependencies.length) {
      file.dependencies.forEach(function(dependency) {
        var dep;
        if ((dependantFile != null ? dependantFile.moduleId : void 0) !== dependency) {
          if (dep = _this.fileCache.byModule[dependency] || _this.fileCache.byModule["" + dependency + "/index"]) {
            dep.parseContents(_this.options.modular);
            return _this._addSource(dep, file);
          } else {
            return notify.warn("dependency " + (notify.strong(dependency)) + " for " + (notify.strong(file.moduleId)) + " not found", 4);
          }
        }
      });
    }
    return JSTarget.__super__._addSource.call(this, file);
  };

  JSTarget.prototype._build = function(compress, lint, fn) {
    var contents, n, opts,
      _this = this;
    opts = {};
    opts.modular = this.options.modular;
    if (this.concat) {
      contents = [];
      return this.sources.forEach(function(file) {
        return file.getContents(opts, function(err, content) {
          if (err) {
            return fn(err);
          } else {
            contents.push(content);
            if (contents.length === _this.sources.length) {
              content = contents.join('\n');
              content = _this._wrapContent(_this._optimizeContent(content));
              if (lint) {
                _this._lint(content, _this.output);
              }
              if (compress) {
                return _this._compress(content, _this.output, function(err, content) {
                  if (err) {
                    return fn(err);
                  } else {
                    return _this._writeFile(content, _this.output, true, fn, true);
                  }
                });
              } else {
                return _this._writeFile(content, _this.output, true, fn, true);
              }
            }
          }
        });
      });
    } else {
      n = this.sources.length;
      return this.sources.forEach(function(file, idx) {
        var filepath;
        filepath = path.extname(_this.output).length ? _this.output : path.join(_this.output, file.qualifiedFilename) + '.js';
        return file.getContents(opts, function(err, content) {
          if (err) {
            return fn(err);
          } else {
            if (lint) {
              _this._lint(content, filepath);
            }
            if (compress) {
              return _this._compress(content, filepath, function(err, content) {
                if (err) {
                  return fn(err);
                } else {
                  return _this._writeFile(content, filepath, false, fn, idx + 1 === n);
                }
              });
            } else {
              return _this._writeFile(content, filepath, false, fn, idx + 1 === n);
            }
          }
        });
      });
    }
  };

  JSTarget.prototype._optimizeContent = function(content) {
    var expr, replaceSnippet, snippet, snippets;
    snippets = {};
    replaceSnippet = function(str, p1, p2, p3, p4) {
      snippets[p2] = p3.replace('__', '___');
      return "" + p1 + p2 + " = _" + p2 + p4;
    };
    content = content.replace(RE_HELPER_METHODS, replaceSnippet);
    return "" + (((function() {
      var _results;
      _results = [];
      for (snippet in snippets) {
        expr = snippets[snippet];
        _results.push('var _' + snippet + ' = ' + expr);
      }
      return _results;
    })()).join(';\n')) + ";\n" + content;
  };

  JSTarget.prototype._wrapContent = function(content) {
    return "(function () {\n" + (indent(content, 2)) + "\n}).call(this);";
  };

  JSTarget.prototype._writeFile = function(content, filepath, withHeader, fn, exit) {
    mkdir(filepath);
    if (withHeader) {
      content = "" + BUILT_HEADER + (new Date().toString()) + "*/\n" + content;
    }
    fs.writeFileSync(filepath, content, 'utf8');
    this.files.push(filepath);
    notify.print("" + (notify.colour('built', notify.GREEN)) + " " + (notify.strong(path.relative(process.cwd(), filepath))), this.watching ? 4 : 3);
    if (exit) {
      return fn(null, this.files);
    }
  };

  return JSTarget;

})(Target);
