// Generated by CoffeeScript 1.4.0
var File, RE_BUILT_HEADER, async, existsSync, fs, notify, path;

fs = require('fs');

path = require('path');

async = require('async');

notify = require('../utils/notify');

existsSync = require('../utils/fs').existsSync;

RE_BUILT_HEADER = /^\/\*BUILT/g;

module.exports = function(type, filepath, basepath, processors, fn) {
  var compiler, extension, name, valid, _ref;
  filepath = path.resolve(filepath);
  if (!existsSync(filepath)) {
    return fn("" + (notify.strong(filepath)) + " not found in project path");
  }
  extension = path.extname(filepath).slice(1);
  if (extension === type) {
    valid = true;
  } else {
    _ref = processors.compilers;
    for (name in _ref) {
      compiler = _ref[name];
      if (extension === compiler.extension) {
        valid = true;
        break;
      }
    }
  }
  if (!valid) {
    return fn("invalid file type " + (notify.strong(path.relative(process.cwd(), filepath))));
  } else {
    return fn(null, new File(type, filepath, basepath, compiler, processors.module));
  }
};

File = (function() {

  function File(type, filepath, basepath, compiler, module) {
    this.type = type;
    this.filepath = filepath;
    this.basepath = basepath;
    this.compiler = compiler;
    this.module = module;
    this.name = path.basename(this.filepath);
    this.qualifiedName = path.relative(this.basepath, this.filepath).replace(path.extname(this.name), '');
    this.needsCompile = this.compiler != null;
    this.moduleID = this.module.getModuleID(this.qualifiedName);
    this.dependencies = [];
    this.isDependency = false;
    this.content = '';
  }

  File.prototype.parseContent = function(compile, fn) {
    var _this = this;
    if (this.content) {
      return process.nextTick(function() {
        return fn();
      });
    } else {
      return fs.readFile(this.filepath, 'utf8', function(err, content) {
        if (err) {
          return fn(err);
        }
        if (content.match(RE_BUILT_HEADER)) {
          return fn();
        }
        _this.dependencies = _this.module.getModuleDependencies(content, _this.moduleID);
        if (compile && _this.needsCompile) {
          return _this.compiler.compile(content, function(err, compiled) {
            if (err) {
              return fn(err);
            }
            _this.content = compiled;
            return fn();
          });
        } else {
          _this.content = content;
          return fn();
        }
      });
    }
  };

  File.prototype.reset = function() {
    this.dependencies = [];
    this.isDependency = false;
    return this.content = '';
  };

  File.prototype.destroy = function() {
    this.reset();
    this.compiler = null;
    return this.module = null;
  };

  return File;

})();
