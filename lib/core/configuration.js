// Generated by CoffeeScript 1.4.0
var DEFAULT, existsSync, fs, locate, notify, path;

fs = require('fs');

path = require('path');

existsSync = require('../utils/fs').existsSync;

notify = require('../utils/notify');

DEFAULT = 'buddy.js';

exports.load = function(url, fn) {
  return locate(url, function(err, url) {
    var data;
    if (err) {
      return fn(err);
    }
    try {
      data = require(url);
    } catch (err) {
      return fn("parsing " + (notify.strong(url)) + "\n  Run " + (notify.strong('buddy -h')) + " for proper formatting");
    }
    if (data.build || data.dependencies || data.settings) {
      process.chdir(path.dirname(url));
      return fn(null, data);
    } else {
      return fn("parsing " + (notify.strong(url)) + "\n  Run " + (notify.strong('buddy -h')) + " for proper formatting");
    }
  });
};

exports.locate = locate = function(url, fn) {
  var dir, parent;
  if (url) {
    url = path.resolve(url);
    if (existsSync(url)) {
      return fs.stat(url, function(err, stats) {
        if (err) {
          return fn(err);
        }
        if (!path.extname(url).length || stats.isDirectory()) {
          url = path.join(url, DEFAULT);
          if (existsSync(url)) {
            return fn(null, url);
          } else {
            return fn("" + (notify.strong(path.basename(url))) + " not found in " + (notify.strong(path.dirname(url))));
          }
        } else {
          return fn(null, url);
        }
      });
    } else {
      return fn("" + (notify.strong(path.basename(url))) + " not found in " + (notify.strong(path.dirname(url))));
    }
  } else {
    while (true) {
      if (typeof dir !== "undefined" && dir !== null) {
        parent = path.resolve(dir, '../');
        if (parent === dir) {
          return fn("" + (notify.strong(DEFAULT)) + " not found on this path");
        } else {
          dir = parent;
        }
      } else {
        dir = process.cwd();
      }
      url = path.join(dir, DEFAULT);
      if (existsSync(url)) {
        return fn(null, url);
      }
    }
  }
};
