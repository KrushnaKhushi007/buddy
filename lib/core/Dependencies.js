// Generated by CoffeeScript 1.4.0
var Dependencies, Dependency, async, cp, existsSync, fs, mkdir, mv, notify, path, rm, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

path = require('path');

fs = require('fs');

async = require('async');

Dependency = require('./dependency');

_ref = require('../utils/utils'), rm = _ref.rm, mv = _ref.mv, cp = _ref.cp, mkdir = _ref.mkdir, notify = _ref.notify, existsSync = _ref.existsSync;

module.exports = Dependencies = (function() {

  function Dependencies(options, compressor) {
    var data, destination, _ref1,
      _this = this;
    this.options = options;
    this.compressor = compressor;
    this._pack = __bind(this._pack, this);

    this._installDependency = __bind(this._installDependency, this);

    this.dependencies = [];
    this.childDependencies = [];
    this.files = [];
    this.temp = path.resolve('.tmp');
    _ref1 = this.options;
    for (destination in _ref1) {
      data = _ref1[destination];
      data.sources.forEach(function(source) {
        return _this.dependencies.push(new Dependency(source, destination, data.output, _this.temp));
      });
    }
  }

  Dependencies.prototype.install = function(fn) {
    var _this = this;
    return mkdir(this.temp, function(err) {
      if (err) {
        return fn(err);
      }
      return async.forEach(_this.dependencies, _this._installDependency, function(err) {
        if (_this.childDependencies.length) {
          return async.forEach(_this.childDependencies, _this._installDependency, function(err) {
            _this.dependencies = _this.childDependencies.concat(_this.dependencies);
            return _this._pack(function(err) {
              return fn(err, _this.files);
            });
          });
        } else {
          return _this._pack(function(err) {
            return fn(err, _this.files);
          });
        }
      });
    });
  };

  Dependencies.prototype._installDependency = function(dependency, fn) {
    var _this = this;
    return dependency.install(function(err, dependencies) {
      if (err) {
        notify.warn(err);
        _this.dependencies.splice(_this.dependencies.indexOf(dependency), 1);
        return dependency.destroy();
      } else {
        if (dependencies.length) {
          dependencies.forEach(function(source) {
            return _this.childDependencies.push(new Dependency(source, dependency.destination, dependency.output, _this.temp));
          });
        }
        notify.print("" + (notify.colour('installed', notify.GREEN)) + " " + (notify.strong(dependency.id)) + " to " + (notify.strong(path.relative(process.cwd(), dependency.destination))), 3);
        _this.files = _this.files.concat(dependency.files);
        return fn();
      }
    });
  };

  Dependencies.prototype._pack = function(fn) {
    var _this = this;
    return rm(this.temp, function(err) {
      var files, output, outputable, outputs, _results;
      if (err) {
        notify.warn(err);
      }
      outputs = {};
      outputable = _this.dependencies.filter(function(dependency) {
        return dependency.output;
      });
      if (outputable.length) {
        outputable.forEach(function(dependency) {
          var _name, _ref1;
          if ((_ref1 = outputs[_name = dependency.output]) == null) {
            outputs[_name] = [];
          }
          return outputs[dependency.output] = outputs[dependency.output].concat(dependency.resources);
        });
        _results = [];
        for (output in outputs) {
          files = outputs[output];
          _results.push(async.map(files, fs.readFile, function(err, contents) {
            var content;
            if (err) {
              return err;
            }
            content = contents.join('\n');
            return async.waterfall([
              (function(cb) {
                return mkdir(output, cb);
              }), (function(cb) {
                return _this.compressor.compress(content, cb);
              }), (function(content, cb) {
                return fs.writeFile(output, content, 'utf8', cb);
              }), (function(cb) {
                notify.print("" + (notify.colour('compressed', notify.GREEN)) + " " + (notify.strong(path.relative(process.cwd(), output))), 3);
                _this.files.push(output);
                return cb();
              })
            ], fn);
          }));
        }
        return _results;
      } else {
        return fn();
      }
    });
  };

  return Dependencies;

})();
