var cnsl = require('../utils/cnsl')
	, colour = cnsl.colour
	, debug = cnsl.debug
	, print = cnsl.print
	, strong = cnsl.strong
	, warn = cnsl.warn
	, comment = require('../utils/comment')
	, FileCache = require('../utils/FileCache')
	, fs = require('fs')
	, exists = fs.existsSync
	, readFile = fs.readFileSync
	, idResource = require('identify-resource')
	, hasMultipleVersions = idResource.hasMultipleVersions
	, identify = idResource.identify
	, resolve = idResource.resolve
	, inherit = require('util').inherits
	, lodash = require('lodash')
	, clone = lodash.clone
	, compact = lodash.compact
	, flatten = lodash.flatten
	, merge = lodash.merge
	, path = require('path')
	, Promise = require('bluebird')
	, truncate = require('../utils/truncate')
	, helpers = {
			write: require('./helpers/write'),
			compile: Promise.promisify(require('transfigure')),
			compress: require('./helpers/compress'),
			concat: require('./helpers/concat'),
			inline: require('./helpers/inline'),
			lint: require('./helpers/lint'),
			escape: require('./helpers/escape'),
			parse: require('./helpers/parse'),
			replace: require('./helpers/replace'),
			wrap: require('./helpers/wrap')
		}

	, BOILERPLATE = fs.readFileSync(path.resolve(__filename, '../../../node_modules/simple-browser-require/require.js'), 'utf8')
	, HEADER = 'generated by Buddy '
	  // Test to determine if file has already been generated by buddy/browserify/component
	, RE_BROWSERIFY_BUILT = /(?:\[function\(require,\s?module,\s?exports\))/
	, RE_BUDDY_BUILT = /\/\* generated by Buddy/
	  // Native Node modules to ignore
	, NATIVE_MODULES = [
			'assert',
			'buffer',
			'child_process',
			'cluster',
			'crypto',
			'dgram',
			'dns',
			'domain',
			'events',
			'fs',
			'http',
			'net',
			'os',
			'path',
			'punycode',
			'querystring',
			'readline',
			'repl',
			'stream',
			'string_decoder',
			'sys',
			'tls',
			'tty',
			'url',
			'util',
			'vm',
			'zlib'
		];

/**
 * File instance factory
 * @param {String} filepath
 * @param {Object} options
 * @returns {File}
 */
var factory = module.exports = function (filepath, options) {
	var file, id;

	// Retrieve by filename
	if (factory.cache.hasFile(filepath)) {
		file = factory.cache.getFile(filepath);
	} else if (id = identify(filepath, options)) {
		// Retrieve by id
		if (factory.cache.hasFile(options.type + ':' + id)) {
			file = factory.cache.getFile(options.type + ':' + id);
		// Create new
		} else {
			file = new File(id, filepath, options);
			factory.cache.addFile(file);
			// Warn of multiple versions
			if (hasMultipleVersions(id)) {
				var name = path.basename(id).split('@')[0];
				warn('more than one version of '
					+ (strong(name))
					+ ' exists ('
					+ (strong(file.relpath))
					+ ')', 3);
			}
		}
	}

	return file;
};

/*
 * Default file cache
 */
module.exports.cache = new FileCache();

/**
 * Constructor
 * @param {String} id
 * @param {String} filepath
 * @param {Object} options
 */
function File (id, filepath, options) {
	this.options = options;
	this.type = options.type;
	this.id = id;
	this.filepath = filepath;
	this.relpath = truncate(path.relative(process.cwd(), filepath));
	this.extension = path.extname(this.filepath).slice(1);
	this.name = path.basename(this.filepath);
	this.content = '';
	this.originalContent = '';
	this.compiledContent = '';
	this.dependencies = [];
	this.dependencyReferences = [];
	this.workflow = null;
	this.isRoot = false;
	this.isDependency = false;
	this.isLocked = false;
	this.isBuddyBuilt = false;
	this.isBrowserifyBuilt = false;

	debug('created '
		+ this.type
		+ ' File instance '
		+ strong(this.relpath), 3);
}

/**
 * Retrieve writeable state
 * @returns {Boolean}
 */
File.prototype.getIsWriteable = function () {
	return this.isRoot || !this.isDependency;
};

/**
 * Retrieve flattened dependency tree
 * @param {Boolean} asReferences
 * @returns {Array}
 */
File.prototype.getDependencies = function (asReferences) {
	var self = this
		, deps = []
		, key = asReferences ? 'dependencyReferences' : 'dependencies';

	function add (dependency, dependant) {
		if ((dependency.instance || dependency) !== self && !~deps.indexOf(dependency)) {
			deps.push(dependency);
			// Add children
			(dependency.instance || dependency)[key].forEach(function (dep) {
				// Protect against circular references
				if ((dep.instance || dep) != dependant) add(dep, dependency);
			});
		}
	};

	this[key].forEach(add);

	return deps;
};

/**
 * Run 'workflow' tasks in sequence
 * @param {Array} workflow
 * @returns {Promise(Array)}
 */
File.prototype.run = function (workflow) {
	var self = this
		, dependencies, cmd;

	if (workflow && this.workflow != workflow) {
		this.workflow = workflow;

		// Call each
		return Promise.each(workflow.map(function (task) {
			return self[task]();
		}), function (deps) {
			if (deps) dependencies = deps;
		}).return(dependencies);
	}

	return Promise.resolve();
};

/**
 * Read and store file contents
 * @returns {Promise}
 */
File.prototype.load = Promise.method(function () {
	if (!this.originalContent) {
		// TODO: handle file read error
		var content = readFile(this.filepath, 'utf8');
		this.content = this.originalContent = content;
		// Determine if file has already been generated
		this.isBuddyBuilt = (this.type == 'js') && RE_BUDDY_BUILT.test(content);
		this.isBrowserifyBuilt = (this.type == 'js') && RE_BROWSERIFY_BUILT.test(content);
		debug('load: ' + strong(this.relpath), 4);
	} else {
		this.content = this.originalContent;
	}
});

/**
 * Compile file contents
 * @returns {Promise}
 */
File.prototype.compile = function () {
	// Only compile if not already
	if (!this.compiledContent) {
		var options = {}
			, self = this
			, dataUrl;

		// Expose properties for compilers
		options.id = this.id;
		options.type = this.type;
		if (this.type == 'html') {
			// Gather all dependencies
			options.includes = this.getDependencies()
				.map(function (dependency) {
					var id = dependency.id
						, idx = id.indexOf('@');
					// Strip version
					if (idx != -1) id = id.slice(0, idx);
					return {
						id: id,
						content: dependency.content
					}
				});
			// Check/load data json file of same name in same directory
			if (fs.existsSync((dataUrl = path.resolve(path.dirname(this.filepath), this.name.replace(this.extension, 'json'))))) {
				options.data = require(dataUrl);
			}
		} else if (this.type == 'css') {
			// Gather all directories
			options.paths = factory.cache.getDirs();
		}

		return commands['compile'](this.filepath, this.content, options)
			.then(function (content) {
				debug('compile: ' + strong(self.relpath), 4);
				this.content = this.compiledContent = content;
			});
	} else {
		this.content = this.compiledContent;
		return Promise.resolve();
	}
};

/**
 * Parse file contents for dependency references
 * @returns {Promise(Array)}
 */
File.prototype.parse = Promise.method(function () {
	// Only parse unbuilt files
	if (!this.isBuddyBuilt || !this.isBrowserifyBuilt) {
		var deps = helpers['parse'](this.filepath, this.type, this.content)
			, filepath, instance;

		debug('parse: ' + strong(this.relpath), 4);

		if (deps) {
			deps.forEach(function (dep) {
				// Validate and add
				filepath = resolve(this.filepath, dep.filepath, this.options);
				instance = factory(filepath, this.options);
				if (filepath && instance) {
					// Save context for future inlining
					this.dependencyReferences.push(dep);
					// Store instance
					dep.instance = instance;
					// Process if not locked (parent target files are locked)
					if (!instance.isLocked) {
						// Store if not already stored
						if (!~this.dependencies.indexOf(instance)) {
							instance.isDependency = true;
							this.dependencies.push(instance);
						}
					}

				// Unable to resolve filepath
				} else {
					// Ignore native Node modules
					if (!(this.type == 'js' && ~NATIVE_MODULES.indexOf(dep.filepath))) {
						warn('dependency '
							+ (strong(dep.filepath))
							+ ' for '
							+ (strong(this.id))
							+ ' not found (ids are case-sensitive)', 4);
					}
				}
			}, this);
		}
	}

	return this.dependencies;
});

/**
 * Inline dependency content
 * @returns {Promise}
 */
File.prototype.inline = Promise.method(function () {
	var deps = (this.type == 'html')
		? this.getDependencies(true)
		: this.dependencyReferences;

	this.content = helpers['inline'](this.filepath, this.type, this.content, deps);
	debug('inline: ' + strong(this.relpath), 4);
});

/**
 * Replace relative dependency references with fully resolved
 * @returns {Promise}
 */
File.prototype.replaceReferences = Promise.method(function () {
	this.content = helpers['replace'].references(this.content, this.dependencyReferences);
	debug('replace dependency references: ' + strong(this.relpath), 4);
});

/**
 * Replace process.env references with values
 * @returns {Promise}
 */
File.prototype.replaceEnvironment = Promise.method(function () {
	this.content = helpers['replace'].environment(this.content, this.dependencyReferences);
	debug('replace environment vars: ' + strong(this.relpath), 4);
});

/**
 * Lint file contents
 * @returns {Promise(Array)}
 */
File.prototype.lint = Promise.method(function () {
	var warnings;

	// Don't lint compiled files, 3rd party modules, or built files
	if (this.extension == this.type
		&& !~this.filepath.indexOf('node_modules')
		&& !this.isBuddyBuilt
		&& !this.isBrowserifyBuilt) {
			if (warnings = helpers['lint'](this.type, this.content)) {
				warn('linting ' + strong(this.relpath), 3);
				warnings.forEach(function (item) {
					if (item) {
						print('['
							+ (colour(item.line, cnsl.CYAN))
							+ ':'
							+ (colour(item.col, cnsl.CYAN))
							+ '] '
							+ item.reason
							+ ':', 4);
						if (item.evidence) print(strong(item.evidence), 5);
					}
				});
			} else {
				debug('lint: ' + strong(this.relpath), 4);
			}
	}

	return warnings;
});

/**
 * Escape file contents for lazy js modules
 * @returns {Promise}
 */
File.prototype.escape = Promise.method(function () {
	this.content = helpers['escape'](this.content);
	debug('escape: ' + strong(this.relpath), 4);
});

/**
 * Compress file contents
 * @returns {Promise}
 */
File.prototype.compress = Promise.method(function () {
	var type = (this.type == 'html')
		// Use extension to force compilation of inlineable content
		? this.extension
		: this.type;

	// TODO: trap errors here
	this.content = helpers['compress'](type, this.content);
	debug('compressed: ' + strong(this.relpath), 4);
});

/**
 * Wrap JS file contents in a module definition
 * @returns {Promise}
 */
File.prototype.wrap = Promise.method(function () {
	// Allow wrapping of browserified bundles
	if (!this.isBuddyBuilt) {
		var lazy = this.options.runtimeOptions
			? this.options.runtimeOptions.lazy
			: false;

		this.content = helpers['wrap'](this.id, this.content, lazy);
		debug('wrap: ' + strong(this.relpath), 4);
	}
});

/**
 * Concatenate file contents
 * @returns {Promise}
 */
File.prototype.concat = Promise.method(function () {
	this.content = helpers['concat'](this.type, this.content, this.getDependencies().reverse());
	debug('concat: ' + strong(this.relpath), 4);
});

/**
 * Write file contents to disk
 * @param {String} filepath
 * @param {Object} options
 * @returns {Promise(String)}
 */
File.prototype.write = function (filepath, options) {
	var self = this;

	if (filepath) {
		options = options || {};

		// Add require boilerplate
		if (options.boilerplate) {
			this.content = BOILERPLATE
				+ '\n'
				+ this.content;
		}

		// Add header
		if (this.type != 'html') {
			this.content = comment(HEADER + (this.options.runtimeOptions.version || ''), this.type)
				+ '\n\n'
				+ this.content;
		}

		// Add bootstrap call
		if (options.bootstrap) {
			this.content += '\nrequire(\'' + this.id + '\');'
		}

		// Write
		return helpers['write'](filepath, this.content)
			.then(function (filepath) {
				print(colour('built'
					+ (self.options.runtimeOptions.compress ? ' and compressed ' : ' '), cnsl.GREEN)
					+ strong(path.relative(process.cwd(), filepath)), 3);
				return filepath;
			});
	} else {
		return Promise.resolve();
	}
};

/**
 * Reset content
 * @param {Boolean} hard
 */
File.prototype.reset = function (hard) {
	this.workflow = null;
	this.isRoot = false;
	this.isLocked = false;
	this.isDependency = false;
	this.dependencies = [];
	this.dependencyReferences = [];
	if (this.type != 'js') {
		this.content = this.originalContent;
		this.compiledContent = '';
	} else {
		this.content = this.compiledContent || this.originalContent;
	}
	if (hard) {
		this.content = this.originalContent = this.compiledContent = '';
		// Following are set on load
		this.isBuddyBuilt = false;
		this.isBrowserifyBuilt = false;
	}
	debug('reset' + (hard ? ' (hard)' : '') + ': ' + strong(this.relpath), 4);
};

/**
 * Destroy instance
 */
File.prototype.destroy = function () {
	this.reset(true);
	this.options = null;
};