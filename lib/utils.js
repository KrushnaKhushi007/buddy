// Generated by CoffeeScript 1.4.0
var cp, existsSync, fs, mkdir, mkdirp, mv, path, readdir;

fs = require('fs');

path = require('path');

mkdirp = require('mkdirp');

existsSync = fs.existsSync || path.existsSync;

exports.notify = {
  RED: '0;31',
  YELLOW: '1;33',
  GREEN: '0;32',
  GREY: '0;90',
  silent: false,
  nocolor: !process.stdout.isTTY,
  colour: function(string, colourCode) {
    if (this.nocolor) {
      return string;
    } else {
      return '\033[' + colourCode + 'm' + string + '\033[0m';
    }
  },
  print: function(msg, ind) {
    if (ind == null) {
      ind = 1;
    }
    if (!this.silent) {
      return console.log(exports.indent(msg, ind));
    }
  },
  error: function(err, ind) {
    if (ind == null) {
      ind = 1;
    }
    if ('string' === typeof err) {
      err = new Error(err);
    }
    this.print("" + (this.colour('error', this.RED)) + ": " + err.message, ind);
    throw err;
  },
  warn: function(msg, indent) {
    if (indent == null) {
      indent = 1;
    }
    return this.print("" + (this.colour('warning', this.YELLOW)) + " " + msg, indent);
  },
  strong: function(string) {
    return this.colour(string, this.GREY);
  }
};

exports.readdir = readdir = function(dir, ignore, files) {
  var _this = this;
  if (ignore == null) {
    ignore = /(?:)/;
  }
  if (files == null) {
    files = [];
  }
  fs.readdirSync(dir).forEach(function(item) {
    var itempath;
    if (!item.match(ignore)) {
      itempath = path.resolve(dir, item);
      if (fs.statSync(itempath).isDirectory()) {
        return readdir(itempath, ignore, files);
      } else {
        return files.push(itempath);
      }
    }
  });
  return files;
};

exports.mkdir = mkdir = function(filepath) {
  var dir;
  dir = path.extname(filepath) ? path.dirname(filepath) : filepath;
  if (!existsSync(dir)) {
    return mkdirp.sync(dir);
  }
};

exports.mv = mv = function(source, destination) {
  try {
    return fs.rename(source, path.resolve(destination, path.basename(source)));
  } catch (err) {

  }
};

exports.cp = cp = function(source, destination, base) {
  var dir,
    _this = this;
  if (base == null) {
    base = null;
  }
  if (fs.statSync(source).isFile()) {
    return fs.writeFileSync(path.resolve(destination, path.basename(source)), fs.readFileSync(source));
  } else {
    if (base == null) {
      base = path.dirname(source);
    }
    dir = path.resolve(destination, source.replace(base, destination));
    if (!existsSync(dir)) {
      fs.mkdirSync(dir);
    }
    return fs.readdirSync(source).forEach(function(item) {
      return cp(path.resolve(source, item), dir, base);
    });
  }
};

exports.indent = function(string, level) {
  var re;
  re = /^/gm;
  string = string.replace(re, (new Array(level)).join('  '));
  return string;
};
