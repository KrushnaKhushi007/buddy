// Generated by CoffeeScript 1.4.0
var Configuration, DEFAULT, existsSync, fs, notify, path, _ref;

fs = require('fs');

path = require('path');

_ref = require('./utils'), notify = _ref.notify, existsSync = _ref.existsSync;

DEFAULT = 'buddy.js';

module.exports = Configuration = (function() {

  function Configuration(url) {
    this.url = url != null ? url : '';
    this.build = null;
    this.dependencies = null;
    this.settings = null;
  }

  Configuration.prototype.locate = function() {
    var dir, exists, parent;
    if (this.url) {
      this.url = path.resolve(this.url);
      if (exists = existsSync(this.url)) {
        if (fs.statSync(this.url).isDirectory()) {
          this.url = path.join(this.url, DEFAULT);
          exists = existsSync(this.url);
        }
      }
      if (!exists) {
        notify.error("" + (notify.strong(path.basename(this.url))) + " not found in " + (notify.strong(path.dirname(this.url))), 2);
      }
    } else {
      while (true) {
        if (typeof dir !== "undefined" && dir !== null) {
          parent = path.resolve(dir, '../');
          if (parent === dir) {
            notify.error("" + (notify.strong(DEFAULT)) + " not found on this path", 2);
          } else {
            dir = parent;
          }
        } else {
          dir = process.cwd();
        }
        this.url = path.join(dir, DEFAULT);
        if (existsSync(this.url)) {
          break;
        }
      }
    }
    process.chdir(path.dirname(this.url));
    return this;
  };

  Configuration.prototype.load = function() {
    var data;
    notify.print("loading config " + (notify.strong(this.url)), 2);
    try {
      data = require(this.url);
      if (data.build || data.dependencies || data.settings) {
        this.build = data.build;
        this.dependencies = data.dependencies;
        this.settings = data.settings;
      } else {
        throw '';
      }
    } catch (err) {
      notify.error("parsing " + (notify.strong(this.url)) + "\n  Run " + (notify.strong('buddy -h')) + " for proper formatting", 2);
    }
    return this;
  };

  return Configuration;

})();
