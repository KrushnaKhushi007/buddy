// Generated by CoffeeScript 1.4.0
var LRServer, fs, onSocketClose, onSocketMessage, path, ready, server;

path = require('path');

fs = require('fs');

LRServer = require('livereload-server');

server = null;

ready = false;

onSocketMessage = function(msg) {
  return console.log(msg);
};

onSocketClose = function() {
  return console.log('closed');
};

exports.start = function(options) {
  server = new LRServer({
    id: "com.example.acme",
    name: "Acme",
    version: "1.0",
    protocols: {
      monitoring: 7,
      saving: 1
    }
  });
  server.on('connected', function(connection) {
    return console.log("Client connected (%s)", connection.id);
  });
  server.on('disconnected', function(connection) {
    return console.log("Client disconnected (%s)", connection.id);
  });
  server.on('command', function(connection, message) {
    return console.log("Received command %s: %j", message.command, message);
  });
  server.on('error', function(err, connection) {
    return console.log("Error (%s): %s", connection.id, err.message);
  });
  server.on('livereload.js', function(request, response) {
    return fs.readFile(path.join(__dirname, 'livereload.js'), 'utf8', function(err, data) {
      err && (function() {
        throw err;
      })();
      response.writeHead(200, {
        'Content-Length': data.length,
        'Content-Type': 'text/javascript'
      });
      return response.end(data);
    });
  });
  return server.listen(function(err) {
    if (err) {
      console.error("Listening failed: %s", err.message);
      return;
    }
    console.log("Listening on port %d.", server.port);
    return ready = true;
  });
};

exports.refresh = function(files) {
  var msg;
  console.log(files);
  if (ready) {
    msg = {
      command: 'reload',
      path: files[0],
      liveCSS: true
    };
    return server.emit('command', msg);
  }
};
