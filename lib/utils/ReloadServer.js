// Generated by CoffeeScript 1.4.0
var Connection, EventEmitter, PORT, ReloadServer, Url, fs, http, path, ws,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

http = require('http');

Url = require('url');

fs = require('fs');

path = require('path');

EventEmitter = require('events').EventEmitter;

ws = require('websocket.io');

Connection = require('./reloadconnection');

PORT = 35729;

module.exports = ReloadServer = (function(_super) {

  __extends(ReloadServer, _super);

  function ReloadServer() {
    this.options = {
      id: 'com.popeindustries.buddy',
      name: 'buddy-livereload',
      version: '1.0',
      port: PORT
    };
    this.port = this.options.port;
    this.connections = {};
    this.connectionId = 0;
    this.server = null;
    this.wsServer = null;
  }

  ReloadServer.prototype.listen = function(fn) {
    var _this = this;
    this.server = http.createServer();
    this.server.on('error', function(err) {
      return fn(err);
    });
    return this.server.listen(this.options.port, function(err) {
      if (err) {
        return fn(err);
      }
      _this.server.on('request', function(request, response) {
        return request.on('end', function() {
          var url;
          url = Url.parse(request.url, true);
          if (url.pathname === '/livereload.js') {
            return fs.readFile(path.join(__dirname, 'livereload.js'), 'utf8', function(err, data) {
              if (err) {
                return fn(err);
              }
              response.writeHead(200, {
                'Content-Length': data.length,
                'Content-Type': 'text/javascript'
              });
              return response.end(data);
            });
          } else {
            response.writeHead(404);
            return response.end();
          }
        });
      });
      _this.wsServer = ws.attach(_this.server);
      _this.wsServer.on('connection', function(socket) {
        return _this._createConnection(socket);
      });
      return fn();
    });
  };

  ReloadServer.prototype.activeConnections = function() {
    var connection, connections, id, _ref;
    connections = [];
    _ref = this.connections;
    for (id in _ref) {
      connection = _ref[id];
      if (connection.isActive()) {
        connections.push(connection);
      }
    }
    return connections;
  };

  ReloadServer.prototype.close = function() {
    var connection;
    this.server.close();
    for (connection in this.connections) {
      connection.close();
    }
    return this.connections = {};
  };

  ReloadServer.prototype._createConnection = function(socket) {
    var connection,
      _this = this;
    connection = new Connection(socket, "buddy" + (++this.connectionId), this.options);
    connection.on('connected', function() {
      _this.connections[connection.id] = connection;
      return _this.emit('connected', connection);
    });
    connection.on('disconnected', function() {
      delete _this.connections[connection.id];
      return _this.emit('disconnected', connection);
    });
    connection.on('command', function(command) {
      return _this.emit('command', command);
    });
    connection.on('error', function(err) {
      return _this.emit('error', err);
    });
    return connection;
  };

  return ReloadServer;

})(EventEmitter);
