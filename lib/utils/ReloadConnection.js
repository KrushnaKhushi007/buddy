// Generated by CoffeeScript 1.4.0
var EventEmitter, Parser, ReloadConnection, TIMEOUT,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

Parser = require('livereload-protocol');

TIMEOUT = 1000;

module.exports = ReloadConnection = (function(_super) {

  __extends(ReloadConnection, _super);

  function ReloadConnection(socket, id, options) {
    var protocols, timeoutID,
      _this = this;
    this.socket = socket;
    this.id = id;
    protocols = {
      monitoring: [Parser.protocols.MONITORING_7],
      conncheck: [Parser.protocols.CONN_CHECK_1],
      saving: [Parser.protocols.SAVING_1]
    };
    this.parser = new Parser('server', protocols);
    this.socket.on('message', function(data) {
      return _this.parser.received(data);
    });
    this.socket.on('close', function() {
      if (timeoutID) {
        clearTimeout(timeoutID);
      }
      return _this.emit('disconnected');
    });
    this.socket.on('error', function(err) {
      _this.socket.close();
      return _this.emit('error', err);
    });
    this.parser.on('command', function(command) {
      if (command.command === 'ping') {
        return _this.send({
          command: 'pong',
          token: command.token
        });
      } else {
        return _this.emit('command', command);
      }
    });
    this.parser.on('connected', function() {
      if (timeoutID) {
        clearTimeout(timeoutID);
      }
      _this.send(_this.parser.hello(options));
      return _this.emit('connected');
    });
    timeoutID = setTimeout(function() {
      timeoutID = null;
      return _this.close();
    }, TIMEOUT);
  }

  ReloadConnection.prototype.isActive = function() {
    var _ref;
    return ((_ref = this.parser.negotiatedProtocols) != null ? _ref.monitoring : void 0) >= 7;
  };

  ReloadConnection.prototype.send = function(msg) {
    this.parser.sending(msg);
    return this.socket.send(JSON.stringify(msg));
  };

  ReloadConnection.prototype.close = function() {
    return this.socket.close();
  };

  return ReloadConnection;

})(EventEmitter);
