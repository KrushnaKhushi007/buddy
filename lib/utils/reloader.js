// Generated by CoffeeScript 1.4.0
var LRServer, debug, fs, onSocketClose, onSocketMessage, path, ready, server, strong, _ref;

path = require('path');

fs = require('fs');

LRServer = require('livereload-server');

_ref = require('./notify'), debug = _ref.debug, strong = _ref.strong;

server = null;

ready = false;

onSocketMessage = function(msg) {
  return console.log(msg);
};

onSocketClose = function() {
  return console.log('closed');
};

exports.start = function(id, name, version, fn) {
  server = new LRServer({
    id: id,
    name: name,
    version: version,
    protocols: {
      monitoring: 7,
      saving: 1
    }
  });
  server.on('connected', function(connection) {
    return debug("live-reload client connected: " + connection.id, 4);
  });
  server.on('disconnected', function(connection) {
    return debug("live-reload client disconnected: " + connection.id, 4);
  });
  server.on('command', function(connection, message) {
    return debug("received live-reload command '" + message.command + "': " + message.url, 4);
  });
  server.on('error', function(err, connection) {
    return fn(err);
  });
  server.on('livereload.js', function(request, response) {
    return fs.readFile(path.join(__dirname, 'livereload.js'), 'utf8', function(err, data) {
      if (err) {
        return fn(err);
      }
      response.writeHead(200, {
        'Content-Length': data.length,
        'Content-Type': 'text/javascript'
      });
      return response.end(data);
    });
  });
  server.on('httprequest', function(url, request, response) {
    response.writeHead(404);
    return response.end();
  });
  return server.listen(function(err) {
    if (!err) {
      debug("started live-reload server on port: " + server.port, 3);
      return ready = true;
    }
  });
};

exports.refresh = function() {
  return console.log(files);
};
