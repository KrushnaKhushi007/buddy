'use strict';

const comment = require('../utils/comment')
  , compiler = require('./compile')
  , fs = require('fs')
  , path = require('path')

  , BOILERPLATE = fs.readFileSync(path.resolve(__dirname, '../../require.js'), 'utf8')
  , HEADER = 'generated by Buddy';

/**
 * Concatenate all 'dependencies' content
 * @param {String} type
 * @param {String} content
 * @param {String} id
 * @param {Array} dependencies
 * @param {Object} options
 * @returns {String}
 */
module.exports = function (type, content, id, dependencies, options) {
  switch (type) {
    case 'js':
      return concatJS(content, id, dependencies, options);
    case 'css':
      return concatCSS(content, options);
    default:
      return content;
  }
};

/**
 * Get concatenated JS 'content'
 * @param {String} content
 * @param {String} id
 * @param {Array} dependencies
 * @param {Object} options
 * @returns {String}
 */
function concatJS (content, id, dependencies, options) {
  const contents = [];

  // Add header comment
  if (options.includeHeader) contents.push(comment(HEADER, 'js'));

  // Add require boilerplate
  if (options.boilerplate) contents.push(BOILERPLATE);

  // Add helpers
  if (options.includeHelpers) {
    const helpers = compiler.getHelpers('js');

    if (helpers) contents.push(helpers);
  }

  // Add dependencies
  dependencies.filter((dependency) => {
    return dependency.type != 'json';
  }).forEach((dependency) => {
    contents.push(dependency.content);
  });

  contents.push(content);

  // Add bootstrap call
  if (options.bootstrap) contents.push(`\nrequire('${id}');`);

  return contents.join('\n');
}

/**
 * Get concatenated CSS 'content'
 * @param {String} content
 * @param {Object} options
 * @returns {String}
 */
function concatCSS (content, options) {
  // Add comment
  if (options.includeHeader) content = `${comment(HEADER, 'css')}\n${content}`;

  return content;
}